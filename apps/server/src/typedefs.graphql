scalar Date

directive @upper on FIELD_DEFINITION
# If "throws" is false, null is returned instead, so remember to make the field nullable
directive @authenticated(throws: Boolean = true) on FIELD_DEFINITION

type Post {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  title: String!
  description: String!
  authorId: ID!
  isOwner: Boolean
  file: File
  author: PublicUser
}

type FileVariant {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  width: Int!
  height: Int!
  path: String!
  quality: Quality!
  fileId: ID!
}

type File {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  type: FileType!
  alt: String!
  variants: [FileVariant!]
}

enum FileType {
  jpeg
  png
}

enum Quality {
  RAW
  THUMBNAIL
  OPTIMIZED
}

interface User {
  id: ID!
  username: String!
  createdAt: Date!
  updatedAt: Date!
}

type PublicUser implements User {
  id: ID!
  username: String!
  createdAt: Date!
  updatedAt: Date!
}

type LoggedInUser implements User {
  id: ID!
  username: String!
  email: String!
  createdAt: Date!
  updatedAt: Date!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

type Query {
  posts(filter: String): [Post!]! @authenticated
  post(id: ID!): Post @authenticated
  loggedInUser: LoggedInUser
  publicUser(id: ID!): PublicUser @authenticated
}

type Mutation {
  deletePost(id: ID!): Post @authenticated(throws: false)
  createUser(user: CreateUserInput): LoggedInUser!
}
